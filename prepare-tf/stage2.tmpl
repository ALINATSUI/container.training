terraform {
  required_providers {
    kubernetes = {
      source  = "hashicorp/kubernetes"
      version = "2.0.3"
    }
  }
}

%{ for index, cluster in clusters ~}

provider "kubernetes" {
  alias = "cluster_${index}"
  config_path = "./kubeconfig.${index}"
}

resource "kubernetes_namespace" "shpod_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "shpod"
  }
}

resource "kubernetes_deployment" "shpod_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "shpod"
    namespace = kubernetes_namespace.shpod_${index}.metadata.0.name
  }
  spec {
    selector {
      match_labels = {
        app = "shpod"
      }
    }
    template {
      metadata {
        labels = {
          app = "shpod"
        }
      }
      spec {
        service_account_name = "shpod"
        container {
          image = "jpetazzo/shpod"
          name = "shpod"
          env {
            name = "PASSWORD"
            value = random_string.shpod_${index}.result
          }
          lifecycle {
            post_start {
              exec {
                command = [ "sh", "-c", "curl http://myip.enix.org/REMOTE_ADDR > /etc/HOSTIP || true" ]
              }
            }
          }
          resources {
            limits = {
              cpu    = "2"
              memory = "500M"
            }
            requests = {
              cpu    = "100m"
              memory = "250M"
            }
          }
        }
      }
    }
  }
}

resource "kubernetes_service" "shpod_${index}" {
  provider = kubernetes.cluster_${index}
  lifecycle {
    ignore_changes = all
  }
  metadata {
    name = "shpod"
    namespace = kubernetes_namespace.shpod_${index}.metadata.0.name
  }
  spec {
    selector = {
      app = "shpod"
    }
    port {
      name = "ssh"
      port = 22
      target_port = 22
      node_port = 32222
    }
    type = "NodePort"
  }
}

resource "kubernetes_service_account" "shpod_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "shpod"
    namespace = kubernetes_namespace.shpod_${index}.metadata.0.name
  }
}

resource "kubernetes_cluster_role_binding" "shpod_${index}" {
  provider = kubernetes.cluster_${index}
  metadata {
    name = "shpod"
  }
  role_ref {
    api_group = "rbac.authorization.k8s.io"
    kind      = "ClusterRole"
    name      = "cluster-admin"
  }
  subject {
    kind      = "ServiceAccount"
    name      = "shpod"
    namespace = "shpod"
  }
}

resource "random_string" "shpod_${index}" {
  length  = 6
  special = false
  upper   = false
}

provider "helm" {
  alias = "cluster_${index}"
  kubernetes {
    config_path = "./kubeconfig.${index}"
  }
}

resource "helm_release" "metrics_server_${index}" {
  provider = helm.cluster_${index}
  repository = "https://charts.bitnami.com/bitnami"
  chart = "metrics-server"
  name = "metrics-server"
  namespace = "metrics-server"
  create_namespace = true
  set {
    name = "apiService.create"
    value = "true"
  }
  set {
    name = "extraArgs.kubelet-insecure-tls"
    value = "true"
  }
  set {
    name = "extraArgs.kubelet-preferred-address-types"
    value = "InternalIP"
  }
}

%{ endfor ~}

output "ip_addresses_of_nodes" {
  value = join("\n", [
  %{ for index, cluster in clusters ~}
    join("\t", concat(
      [ random_string.shpod_${index}.result, "ssh -l k8s -p 32222" ],
      split(" ", file("./externalips.${index}"))
    )),
  %{ endfor ~}
  ])
}
